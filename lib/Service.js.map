{"version":3,"sources":["Service.js"],"names":[],"mappings":";;;;;;;;;;IAAqB,OAAO;AAEf,WAFQ,OAAO,CAEd,OAAO,EAAE;0BAFF,OAAO;;AAGxB,QAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;GACzB;;eAJkB,OAAO;;WAMT,2BAAC,IAAI,EAAE;;;AACtB,aAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,YAAI,EAAE,GAAG,MAAK,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACtC,eAAO,MAAK,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,SACxB,CAAC,UAAA,GAAG,EAAI;AACZ,iBAAO,MAAM,CAAC,GAAG,CAAC,CAAC;SACpB,CAAC,CACD,IAAI,CAAC,UAAA,IAAI,EAAI;AACZ,iBAAO,CAAC,IAAI,CAAC,CAAC;SACf,CAAC,CAAC;OACN,CAAC,CAAC;KACJ;;;WAEE,eAA0B;UAAzB,QAAQ,yDAAC,EAAE;UAAE,OAAO,yDAAC,EAAE;;AACzB,aAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;KAC7C;;;WAEQ,qBAA8C;UAA7C,IAAI,yDAAC,CAAC;UAAE,GAAG,yDAAC,EAAE;UAAE,OAAO,yDAAC,UAAU;UAAE,KAAK,yDAAC,CAAC;;AACnD,UAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,UAAI,OAAO,GAAG,EAAE,CAAC;AACjB,aAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;KACpC;;;WAES,oBAAC,EAAE,EAAE;AACb,aAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;KACrD;;;WAEgB,2BAAC,IAAI,EAAE,EAAE,EAAE;;;AAC1B,aAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,eAAK,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAE,UAAA,EAAE,EAAI;AAC9B,cAAG,IAAI,KAAG,EAAE,EAAE;AACZ,mBAAO,MAAM,CAAE,WAAW,CAAC,CAAC;WAC7B;AACD,YAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACjB,iBAAO,EAAE,CAAC;SACX,CAAC,CACD,IAAI,CAAE,UAAA,EAAE,EAAI;AACX,iBAAK,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAE,UAAA,EAAE,EAAI;AACpC,mBAAO,OAAO,CAAC,EAAE,CAAC,CAAC;WACpB,CAAC,CAAC;SACJ,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;WAEY,uBAAC,EAAE,EAAE;;;AAChB,aAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,eAAK,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAE,UAAA,EAAE,EAAI;AAC9B,cAAG,IAAI,KAAG,EAAE,EAAE;AACZ,mBAAO,OAAO,CAAC,IAAI,CAAC,CAAC;WACtB;AACD,iBAAK,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,IAAI,CAAE,UAAA,OAAO,EAAI;AAC3C,mBAAO,OAAO,CAAC,OAAO,KAAG,IAAI,CAAC,CAAC;WAChC,CAAC,CAAC;SACJ,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;SA7DkB,OAAO;;;qBAAP,OAAO","file":"Service.js","sourcesContent":["export default class Service {\n\n  constructor(manager) {\n    this._manager = manager;\n  }\n\n  createOneFromData(data) {\n    return new Promise((resolve, reject) => {\n      let vo = this._manager.getNewVo(data);\n      return this._manager.saveOne(vo)\n        .catch(err => {\n          return reject(err);\n        })\n        .then(user => {\n          resolve(user);\n        });\n    });\n  }\n\n  get(criteria={}, options={}) {\n    return this._manager.get(criteria, options);\n  }\n\n  getByPage(page=1, npp=10, orderby='username', order=1) {\n    let criteria = {};\n    let options = {};\n    return this.get(criteria, options);\n  }\n\n  getOneById(id) {\n    return this._manager.getByUniqueProperty('_id', id);\n  }\n\n  updateOneFromData(data, id) {\n    return new Promise((resolve, reject) => {\n      this.getOneById(id).then( vo => {\n        if(null===vo) {\n          return reject ('not found');\n        }\n        vo.setData(data);\n        return vo;\n      })\n      .then( vo => {\n        this._manager.saveOne(vo).then( vo => {\n          return resolve(vo);\n        });\n      });\n    });\n  }\n\n  deleteOneById(id) {\n    return new Promise((resolve, reject) => {\n      this.getOneById(id).then( vo => {\n        if(null===vo) {\n          return resolve(null);\n        }\n        this._manager.deleteOne(vo).then( success => {\n          return resolve(success===true);\n        });\n      });\n    });\n  }\n}\n"],"sourceRoot":"/source/"}