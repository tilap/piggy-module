{"version":3,"sources":["Service.js"],"names":[],"mappings":"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","file":"Service.js","sourcesContent":["/**\n * Execute any business request from business data. Mostly output Vo\n */\nexport default class Service {\n\n  /**\n   * @param {Manager} manager - manager a manager instance\n   */\n  constructor(manager) {\n    /**\n     * @type {Manager}\n     * @private\n     */\n    this._manager = manager;\n\n    /**\n     * @type {object}\n     * @private\n     */\n    this._context = {};\n  }\n\n  /**\n   * Store a context\n   *\n   * @param {String} key - the context key\n   * @param {any} value - the context value\n   * @return {self}\n   * @access public\n   */\n  setContext(key, value) {\n    this._context[key]=value;\n    return this;\n  }\n\n  /**\n   * Check if a context key exists\n   *\n   * @param {String} key - the context key\n   * @return {Boolean}\n   * @access public\n   */\n  hasContext(key) {\n    return Object.keys(this._context).indexOf(key) > -1;\n  }\n\n  /**\n   * Get a context value or a default one\n   *\n   * @param {String} key - the context key\n   * @param {any} defaultValue - the default value is no context key exists\n   * @return {Boolean}\n   * @access public\n   */\n  getContext(key, defaultValue = null) {\n    return this.hasContext(key) ? this._context[key] : defaultValue;\n  }\n\n  /**\n   * Store and override all context\n   *\n   * @param {object} context - the context key\n   * @return {self}\n   * @access public\n   */\n  setFullContext(context) {\n    this._context = context;\n    return this;\n  }\n\n\n  /**\n   * Get a list of Vo\n   *\n   * @param {Object} criteria - mongodb-like criteria style\n   * @param {Object} options - mongodb-like options style\n   * @return {Promise<Vo[], Error>}\n   * @access public\n   */\n  get(criteria={}, options={}) {\n    return this._manager.get(criteria, options);\n  }\n\n\n  /**\n   * Get one Vo according to criteria\n   *\n   * @param {Object} criteria - mongodb-like criteria style\n   * @param {Object} options - mongodb-like options style\n   * @return {Promise<any, Error>} - null if no Vo found or the vo\n   * @throw {Error}\n   * @access public\n   */\n  getOne(criteria={}, options={}) {\n    return new Promise( (resolve, reject) => {\n      this.get(criteria, options).then( vos => {\n        if(vos.length===0) {\n          return resolve(null);\n        }\n        if(vos.length===1) {\n          return resolve(vos[0]);\n        }\n        reject(new Error('get One has multiple results'));\n      });\n    });\n  }\n\n  getOneByUniqueProperty(property, value) {\n    let criteria = {};\n    criteria[property] = value;\n    return this.getOne(criteria);\n  }\n\n  getOneById(id) {\n    return this.getOneByUniqueProperty('_id', id);\n  }\n\n  /**\n   * Get a paginated list of Vo\n   *\n   * @param {Object} criteria - mongodb-like criteria style\n   * @param {integer} page - the page to retrieve\n   * @param {integer} limit - number of item per page\n   * @param {string} orderby - a Vo property to order by\n   * @param {string} order - 'asc' or 'desc'\n   * @return {Promise<Vo[], Error>}\n   * @access public\n   */\n  getByPage(criteria={}, page=1, limit=15, orderby='id', order='asc') {\n    page = page > 0 ? page : 1;\n    order = (order==='desc' || order===false || order===-1 || order==='-1') ? 'desc' : 'asc';\n    let options = {};\n    options.limit = limit;\n    options.skip = (page-1) * limit;\n    options.sort = [[orderby, order]];\n    return this.get(criteria, options);\n  }\n\n\n  /**\n   * Create a Vo from a data object\n   *\n   * @param {object} data -\n   * @return {Promise<Vo, Error>} - new Vo\n   * @access public\n   */\n  insertOne(data={}) {\n    let vo = this._manager.getNewVo(data);\n    return new Promise((resolve, reject) => {\n      this._manager.insertOne(vo)\n        .catch(err => reject(err))\n        .then(vo => resolve(vo));\n    });\n  }\n\n  /**\n   * Update a Vo properties from a dataset\n   *\n   * @param {Object} data - a data object\n   * @return {Promise<Vo, Error>} - the updated Vo\n   * @access public\n   */\n  updateOne(id, data={}) {\n    return this.updateOneByUniqueProperty('_id', id, data);\n  }\n\n  updateOneByUniqueProperty(property, value, newData) {\n    return new Promise((resolve, reject) => {\n      this.getOneByUniqueProperty(property, value)\n        .then( vo => {\n          if(null===vo) {\n            return reject ('not found');\n          }\n          vo.setData(newData);\n          return vo;\n        })\n        .then( vo => {\n          this._manager.updateOne(vo)\n            .then( updatedVo => resolve(updatedVo))\n            .catch(err => reject(err));\n        })\n        .catch(err => reject(err));\n    });\n  }\n\n  delete(criteria={}) {\n    return new Promise( (resolve, reject) => {\n      this.get(criteria)\n        .then( vos => {\n          this._manager.delete(vos)\n            .then( deletedCount => {\n              return resolve(deletedCount);\n            })\n            .catch( error => reject(error) );\n        })\n        .catch(err => reject(err));\n    });\n  }\n\n\n  /**\n   * Get the list of Class available methods\n   *\n   * @return {String[]} - the list of the callable methods\n   * @access public\n   */\n  get availableMethods() {\n    let childMethods = Object.getOwnPropertyNames(this.__proto__);\n    let OwnMethods = Object.getOwnPropertyNames(Service.prototype);\n\n    let methods = childMethods;\n    OwnMethods.forEach( method => {\n      if(methods.indexOf(method) < 0) {\n        methods.push(method);\n      }\n    });\n    return methods;\n  }\n}\n"],"sourceRoot":"/source/"}