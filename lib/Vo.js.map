{"version":3,"sources":["Vo.js"],"names":[],"mappings":"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","file":"Vo.js","sourcesContent":["import { VoError } from './Errors';\nimport caster from './utils/castValue';\n\nlet ID_KEY= '_id';\n\n/**\n * Value Object\n */\nexport default class Vo {\n\n  /**\n   * @param {Object} data - the object data\n   */\n  constructor(data = {}) {\n    this.resetData();\n    this.setData(data);\n    /** @type {String} */\n    this._status = this.id ? Vo.STATUS.SAVED : Vo.STATUS.NEW;\n  }\n\n  /**\n   * Get the id as string\n   * @return {String}\n   */\n  get id() {\n    return this.data[ID_KEY] ? this.data[ID_KEY].toString() : null;\n  }\n\n  /**\n   * Get the cleaned dto\n   * @return {Object}\n   */\n  get dto() {\n    return this.data;\n  }\n\n  /**\n   * Is the object new (not saved) ?\n   * @return {Boolean}\n   */\n  get isNew() {\n    return this.status === Vo.STATUS.NEW;\n  }\n\n  /**\n   * Is the object unsaved (exist in storage but has changed) ?\n   * @return {Boolean}\n   */\n  get isChanged() {\n    return this.status === Vo.STATUS.CHANGED;\n  }\n\n  /**\n   * Is the object saved in storage ?\n   * @return {Boolean}\n   */\n  get isSaved() {\n    return this.status === Vo.STATUS.SAVED;\n  }\n\n  /**\n   * Property getter\n   * @param {string} key - the property name\n   * @param {?any} defaultValue - the default value if the property is not set\n   * @return {any}\n   * @throw {VoError} - if property does not exist\n   * @access public\n   */\n  get(key, defaultValue=null) {\n    this.constructor.assumePropertyExists(key);\n    return this.data[key] ? this.data[key] : defaultValue;\n  }\n\n  /**\n   * Property setter\n   * @param {string} key - the property name\n   * @param {any} value - the value to assign\n   * @return {self}\n   * @throw {VoError} - if property does not exist\n   * @access public\n   */\n  set(key, value) {\n    this.constructor.assumePropertyExists(key);\n    value = this.castVoPropertyValue(key, value);\n    if (this.data[key] !== value) {\n      this.data[key]= value;\n      this._updateStatus(Vo.STATUS.CHANGED);\n    }\n    return this;\n  }\n\n  /**\n   * Multi property setting\n   * @param {Object} data - associated key value object\n   * @return {self}\n   * @access public\n   */\n  setData(data={}) {\n    Object.keys(data).forEach( property => {\n      this.set(property, data[property]);\n    });\n    return this;\n  }\n\n  /**\n   * Reset all vo data\n   * @return {self}\n   * @access public\n   */\n  resetData() {\n    this.data = {};\n    return this;\n  }\n\n  /**\n   * Status (from Vo.STATUS values: 'new', 'changed' or 'saved')\n   * @return {String}\n   */\n  get status() {\n    return this._status;\n  }\n\n  /**\n   * To make sure status cannot be access in public\n   * @param {any} value\n   * @throw {Error}\n   */\n  set status(value) {\n    throw new Error('Vo Status cannot be changed');\n  }\n\n  /**\n   * Cast a Vo property and return property well formated\n   * @param {String} key - the property name\n   * @param {any} value - the property value to cast\n   * @return {any} - the cast property\n   * @access public\n   */\n  castVoPropertyValue(key, value) {\n    this.constructor.assumePropertyExists(key);\n    try {\n      return caster(value, this.constructor.getPropertyConfig(key).type);\n    }\n    catch(err) {\n      throw new VoError('Cast property failed for property \"' + key + '\": ' + err.message);\n    }\n  }\n\n  /**\n   * Update the status and trigger status change event\n   * @param {String} newStatus - the new status (one of the Vo.STATUS)\n   * @return {boolean} - true if the status has changed, else false\n   * @access private\n   */\n  _updateStatus(newStatus) {\n    if(this.status === newStatus) {\n      return false;\n    }\n    let previousStatus = this.status;\n    this._status = newStatus;\n    this.statusChangeTrigger(previousStatus, newStatus);\n    return true;\n  }\n\n  /**\n   * Method triggered when status change. To override by custom one\n   * @param {String} previousStatus - the old status (one of the Vo.STATUS)\n   * @param {String} newStatus - the new status (one of the Vo.STATUS)\n   * @access protected\n   */\n  statusChangeTrigger(previousStatus, newStatus) {} // jshint ignore:line\n\n  /**\n   * Get the primary key name\n   * @return {String}\n   */\n  static get primaryKey() {\n    return ID_KEY;\n  }\n\n  /**\n   * Check if a Vo property exists, else throw an Error\n   * @param {String} property - the property name\n   * @throw {VoError}\n   * @access public\n   * @static\n   */\n  static assumePropertyExists(property) {\n    if(!this.hasProperty(property)) {\n      throw new VoError('The property ' + property + ' is not defined in ' + this.constructor.name);\n    }\n  }\n\n  /**\n   * Check if a Vo property exists\n   * @param {String} property - the property name\n   * @return {boolean}\n   * @access public\n   * @static\n   */\n  static hasProperty(property) {\n    return this.getPropertiesNames().indexOf(property) > -1;\n  }\n\n  /**\n   * Get a list of all the properies of the Vo\n   * @return {String[]}\n   * @access public\n   * @static\n   */\n  static getPropertiesNames() {\n    return Object.keys(this._properties);\n  }\n\n  /**\n   * Get all configuration of a property\n   * @param {String} property - the property name\n   * @return {Object}\n   * @throw {VoError} - if property does not exist\n   * @access public\n   * @static\n   */\n  static getPropertyConfig(property) {\n    this.assumePropertyExists(property);\n    return this._properties[property];\n  }\n\n  /**\n   * Get the type of a property according to config\n   * @param {String} property - the property name\n   * @return {String}\n   * @throw {VoError} - if property does not exist\n   */\n  static getPropertyType(property) {\n    this.assumePropertyExists(property);\n    return this.getPropertyConfig(property).type || null;\n  }\n\n  /**\n   * Get the default value of a property according to config\n   * @param {String} property - the property name\n   * @return {String}\n   * @throw {VoError} - if property does not exist\n   */\n  static getPropertyDefault(property) {\n    this.assumePropertyExists(property);\n    return this.getPropertyConfig(property).default || null;\n  }\n}\n\nObject.defineProperty(Vo, 'STATUS', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: Object.freeze({\n    NEW: 'new',\n    CHANGED: 'changed',\n    SAVED: 'saved'\n  })\n});\n\nVo.init = function(VoChild, properties) {\n  let objectProperties = {};\n  Object.keys(properties).forEach((name) => {\n    if (VoChild.hasOwnProperty(name)) {\n      throw new Error('Property ' + name + ' is a reserved keyname');\n    }\n\n    let cleanedProperty = {};\n    ['type', 'default'].forEach( elmt => {\n      if(properties[name][elmt]) {\n        cleanedProperty[elmt] = properties[name][elmt];\n      }\n    });\n    objectProperties[name] = cleanedProperty;\n\n    Object.defineProperty(VoChild.prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        this.set(name, value);\n      }\n    });\n  });\n\n  Object.defineProperty(VoChild, '_properties', {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: objectProperties\n  });\n};\n"],"sourceRoot":"/source/"}