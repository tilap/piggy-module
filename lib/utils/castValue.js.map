{"version":3,"sources":["utils/castValue.js"],"names":[],"mappings":"2HAAsB,WAAW,qDASjC,IAAI,SAAS,CAAG,MAAM,CAAC,OAAO,GAAG,SAAS,KAAK,CAAE,IAAI,CAAE,CAErD,GAAI,KAAK,IAAI,IAAI,CAAE,CACjB,OAAO,KAAK,CAAC,CACd,AAED,OAAO,IAAI,CAAC,WAAW,EACrB,KAAK,KAAK,CACR,GAAI,KAAK,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,CAAE,CAC1C,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAClC,AACD,IAAI,SAAS,CAAG,IAAI,CAAC,CAAC,CAAC,CAAC,AACxB,KAAK,CAAC,OAAO,CAAC,SAAC,UAAU,CAAE,KAAK,CAAK,CACnC,KAAK,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,UAAU,CAAE,SAAS,CAAC,CAAC,CACjD,CAAC,CAAC,AACH,OAAO,KAAK,CAAC,AAEf,KAAK,MAAM,CACT,GAAI,KAAK,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,CAAE,CACxC,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CACrC,AACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,SAAC,GAAG,CAAK,CACjC,KAAK,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAC/C,CAAC,CAAC,AACH,OAAO,KAAK,CAAC,AAEf,KAAK,QAAQ,CACX,OAAO,IAAI,CAAC,IAAI,EACd,KAAK,MAAM,CACT,OAAO,KAAK,CAAC,WAAW,KAAK,IAAI,CAAG,KAAK,CAAG,uBAAU,MAAM,CAAC,KAAK,CAAC,CAAC,AACtE,KAAK,QAAQ,CACX,OAAO,KAAK,CAAC,WAAW,KAAK,MAAM,CAAG,KAAK,CAAG,MAAM,CAAC,KAAK,CAAC,CAAC,AAC9D,KAAK,QAAQ,CACX,IAAI,CAAC,CAAG,KAAK,CAAC,WAAW,KAAK,MAAM,CAAG,KAAK,CAAG,MAAM,CAAC,KAAK,CAAC,CAAC,AAC7D,GAAG,MAAM,CAAC,KAAK,CAAE,CAAC,CAAE,CAAE,CACpB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CACnC,AACD,OAAO,CAAC,CAAC,AACX,KAAK,QAAQ,CAIX,GAAG,KAAK,CAAC,WAAW,KAAK,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,KAAK,UAAU,CAAE,CACxE,OAAO,KAAK,CAAC,CACd,AACD,MAAM,AACR,KAAK,SAAS,CACZ,OAAO,KAAK,CAAC,WAAW,KAAG,OAAO,CAAG,OAAO,CAAC,KAAK,CAAC,CAAI,KAAK,KAAG,IAAI,IAAI,KAAK,KAAI,CAAC,IAAI,KAAK,KAAG,GAAG,AAAC,CAAC,AACpG,QACE,OAAO,AAAC,IAAI,CAAC,IAAI,KAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAI,KAAK,CAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CACvF,AACH,QACE,GAAG,IAAI,KAAG,IAAI,CAAE,CACd,OAAO,KAAK,CAAC,CACd,AACD,GAAI,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,KAAK,IAAI,CAAE,CAClF,MAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAC1E,AACD,OAAO,KAAK,CAAC,CAChB,CACF,CAAC","file":"utils/castValue.js","sourcesContent":["import sanitizer from 'validator';\n\n/**\n * Cast a value to match a given type\n * @param {any} value - the value to cast\n * @param {any} type - type of the object: Array, String, Object, ...\n * @return {any} - the value casted\n * @throw {Error} - if cast failed\n */\nlet castValue = module.exports = function(value, type) {\n\n  if (value == null) {\n    return value;\n  }\n\n  switch(type.constructor) {\n    case Array:\n      if (value.constructor !== type.constructor) {\n        throw new Error('Invalid array');\n      }\n      let arrayType = type[0];\n      value.forEach((arrayValue, index) => {\n        value[index] = castValue(arrayValue, arrayType);\n      });\n      return value;\n\n    case Object:\n      if (value.constructor !== type.constructor) {\n          throw new Error('Invalid object');\n      }\n      Object.keys(type).forEach((key) => {\n        value[key] = castValue(type[key], value[key]);\n      });\n      return value;\n\n    case Function:\n      switch(type.name) {\n        case 'Date':\n          return value.constructor === Date ? value : sanitizer.toDate(value);\n        case 'String':\n          return value.constructor === String ? value : String(value);\n        case 'Number':\n          let v = value.constructor === Number ? value : Number(value);\n          if(Number.isNaN( v )) {\n            throw new Error('Invalid number');\n          }\n          return v;\n        case 'Object':\n          // Sorry for that fucking workaround.\n          // Cannot forec cast coz require ObjectID AND don't want to put hard deendency here. Gonna find another way.\n          // Maybe the validator depends on the storage?\n          if(value.constructor === Object || value.constructor.name === 'ObjectID') {\n            return value;\n          }\n          break;\n        case 'Boolean':\n          return value.constructor!==Boolean ? Boolean(value) : (value===true || value ===1 || value==='1');\n        default:\n          return (type.name===value.constructor.name) ? value : value.constructor.name(value);\n      }\n    default:\n      if('ID'===type) {\n        return value;\n      }\n      if (value.constructor && value.constructor.name && value.constructor.name !== type) {\n        throw new Error('Invalid object ' + type.constructor.name + ', ' + type);\n      }\n      return value;\n  }\n};\n"],"sourceRoot":"/source/"}