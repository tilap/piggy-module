{"version":3,"sources":["utils/castValue.js"],"names":[],"mappings":";;;;yBAAsB,WAAW;;;;AAEjC,IAAI,SAAS,GAAG,MAAM,CAAC,OAAO,GAAG,UAAS,KAAK,EAAE,IAAI,EAAE;;AAErD,MAAI,KAAK,IAAI,IAAI,EAAE;AACjB,WAAO,KAAK,CAAC;GACd;;AAED,UAAO,IAAI,CAAC,WAAW;AACrB,SAAK,KAAK;AACR,UAAI,KAAK,CAAC,WAAW,KAAK,KAAK,EAAE;AAC/B,cAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;OAClC;AACD,UAAI,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACxB,WAAK,CAAC,OAAO,CAAC,UAAC,UAAU,EAAE,KAAK,EAAK;AACnC,aAAK,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;OACjD,CAAC,CAAC;AACH,aAAO,KAAK,CAAC;;AAAA,AAEf,SAAK,MAAM;AACT,UAAI,KAAK,CAAC,WAAW,KAAK,MAAM,EAAE;AAC9B,cAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;OACrC;AACD,YAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,EAAK;AACjC,aAAK,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;OAC/C,CAAC,CAAC;AACH,aAAO,KAAK,CAAC;;AAAA,AAEf,SAAK,QAAQ;AACX,cAAO,IAAI,CAAC,IAAI;AACd,aAAK,MAAM;AACT,iBAAO,KAAK,CAAC,WAAW,KAAK,IAAI,GAAG,KAAK,GAAG,uBAAU,MAAM,CAAC,KAAK,CAAC,CAAC;AAAA,AACtE,aAAK,QAAQ;AACX,iBAAO,KAAK,CAAC,WAAW,KAAK,MAAM,GAAG,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AAAA,AAC9D,aAAK,QAAQ;AACX,cAAI,CAAC,GAAG,KAAK,CAAC,WAAW,KAAK,MAAM,GAAG,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AAC7D,cAAG,MAAM,CAAC,KAAK,CAAE,CAAC,CAAE,EAAE;AACpB,kBAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;WACnC;AACD,iBAAO,CAAC,CAAC;AAAA,AACX,aAAK,SAAS;AACZ,iBAAO,KAAK,CAAC,WAAW,KAAG,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,GAAI,KAAK,KAAG,IAAI,IAAI,KAAK,KAAI,CAAC,IAAI,KAAK,KAAG,GAAG,AAAC,CAAC;AAAA,AACpG;AACE,iBAAO,AAAC,IAAI,CAAC,IAAI,KAAG,KAAK,CAAC,WAAW,CAAC,IAAI,GAAI,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAAA,OACvF;AAAA,GACJ;;AAED,MAAI,KAAK,CAAC,WAAW,CAAC,IAAI,KAAK,IAAI,EAAE;AACnC,UAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;GAC1E;;AAED,SAAO,KAAK,CAAC;CACd,CAAC","file":"utils/castValue.js","sourcesContent":["import sanitizer from 'validator';\n\nlet castValue = module.exports = function(value, type) {\n\n  if (value == null) {\n    return value;\n  }\n\n  switch(type.constructor) {\n    case Array:\n      if (value.constructor !== Array) {\n        throw new Error('Invalid array');\n      }\n      let arrayType = type[0];\n      value.forEach((arrayValue, index) => {\n        value[index] = castValue(arrayValue, arrayType);\n      });\n      return value;\n\n    case Object:\n      if (value.constructor !== Object) {\n          throw new Error('Invalid object');\n      }\n      Object.keys(type).forEach((key) => {\n        value[key] = castValue(type[key], value[key]);\n      });\n      return value;\n\n    case Function:\n      switch(type.name) {\n        case 'Date':\n          return value.constructor === Date ? value : sanitizer.toDate(value);\n        case 'String':\n          return value.constructor === String ? value : String(value);\n        case 'Number':\n          let v = value.constructor === Number ? value : Number(value);\n          if(Number.isNaN( v )) {\n            throw new Error('Invalid number');\n          }\n          return v;\n        case 'Boolean':\n          return value.constructor!==Boolean ? Boolean(value) : (value===true || value ===1 || value==='1');\n        default:\n          return (type.name===value.constructor.name) ? value : value.constructor.name(value);\n      }\n  }\n\n  if (value.constructor.name !== type) {\n    throw new Error('Invalid object ' + type.constructor.name + ', ' + type);\n  }\n\n  return value;\n};\n"],"sourceRoot":"/source/"}