{"version":3,"sources":["Storage/Db.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;wBAA4B,YAAY;;;;sBACX,aAAa;;IAErB,OAAO;YAAP,OAAO;;AAEf,WAFQ,OAAO,CAEd,UAAU,EAAE,IAAI,EAAE;0BAFX,OAAO;;AAGxB,+BAHiB,OAAO,6CAGlB,UAAU,EAAE,IAAI,EAAE;GACzB;;eAJkB,OAAO;;WAMvB,eAAgB;;;UAAf,QAAQ,yDAAG,EAAE;;AACf,aAAO,IAAI,OAAO,CAAE,UAAC,OAAO,EAAE,MAAM,EAAK;AACvC,eAAO,MAAK,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,KAAK,EAAK;AACpD,cAAG,GAAG,EAAE;AACN,kBAAM,CAAC,GAAG,CAAC,CAAC;WACb;AACD,iBAAO,CAAC,KAAK,CAAC,CAAC;SAChB,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;WAEK,gBAAC,MAAM,EAAE;;;AACb,aAAO,IAAI,OAAO,CAAE,UAAC,OAAO,EAAE,MAAM,EAAK;AACvC,eAAK,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,UAAC,GAAG,EAAE,OAAO,EAAK;AAC/C,cAAG,GAAG,EAAE;AACN,kBAAM,CAAC,GAAG,CAAC,CAAC;WACb,MACI,IAAG,CAAC,OAAO,EAAE;AAChB,kBAAM,CAAE,YA1BT,YAAY,CA0Bc,qCAAqC,CAAC,CAAE,CAAC;WACnE,MACI;AACH,mBAAO,CAAC,OAAO,CAAC,CAAC;WAClB;SACF,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;WAEK,gBAAC,QAAQ,EAAE,SAAS,EAAE;;;AAC1B,aAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAC,GAAG,EAAK;AAC1D,YAAG,GAAG,EAAE;AACN,iBAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC5B;AACD,eAAO,OAAK,GAAG,CAAC,QAAQ,CAAC,CAAC;OAC3B,CAAC,CAAC;KACJ;;;WAEK,iBAAC,QAAQ,EAAE;;;AACf,aAAO,IAAI,OAAO,CAAE,UAAC,OAAO,EAAE,MAAM,EAAK;AACvC,eAAK,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,cAAc,EAAK;AACxD,cAAG,GAAG,EAAE;AACN,kBAAM,CAAC,GAAG,CAAC,CAAC;WACb;AACD,iBAAO,CAAC,cAAc,CAAC,CAAC;SACzB,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;SAnDkB,OAAO;;;qBAAP,OAAO","file":"Storage/Db.js","sourcesContent":["import AbstractStorage from './Abstract';\nimport { StorageError } from './../Errors';\n\nexport default class Storage extends AbstractStorage{\n\n  constructor(collection, name) {\n    super(collection, name);\n  }\n\n  get(criteria = {}) {\n    return new Promise( (resolve, reject) => {\n      return this.collection.find(criteria, (err, items) => {\n        if(err) {\n          reject(err);\n        }\n        resolve(items);\n      });\n    });\n  }\n\n  insert(voData) {\n    return new Promise( (resolve, reject) => {\n      this.collection.insert(voData, (err, newItem) => {\n        if(err) {\n          reject(err);\n        }\n        else if(!newItem) {\n          reject( new StorageError('Error while inserting (no new item)') );\n        }\n        else {\n          resolve(newItem);\n        }\n      });\n    });\n  }\n\n  update(criteria, newVoData) {\n    return this.collection.update(criteria, newVoData, (err) => {\n      if(err) {\n        return Promise.reject(err);\n      }\n      return this.get(criteria);\n    });\n  }\n\n  delete(criteria) {\n    return new Promise( (resolve, reject) => {\n      this.collection.remove(criteria, (err, deleteRowCount) => {\n        if(err) {\n          reject(err);\n        }\n        resolve(deleteRowCount);\n      });\n    });\n  }\n}\n"],"sourceRoot":"/source/"}