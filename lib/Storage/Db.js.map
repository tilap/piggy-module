{"version":3,"sources":["Storage/Db.js"],"names":[],"mappings":"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","file":"Storage/Db.js","sourcesContent":["import AbstractStorage from './Abstract';\nimport { ObjectId } from 'mongodb';\n\n/**\n * Manage data from a mongodb collection.\n */\nexport default class MongoStorage extends AbstractStorage{\n\n  /**\n   * @param {Object} collection - A mongodb collection\n   */\n  constructor(collection) {\n    super(collection);\n  }\n\n  /**\n   * Get a list of data Object from criteria and options\n   *\n   * @param {Object} criteria - mongodb criteria style\n   * @param {Object} options - mongodb options style\n   * @return {Promise<Object[], Error>}\n   * @access public\n   * @override\n   */\n  get(criteria = {}, options= {}) {\n    criteria = this._prepareCriteria(criteria);\n    return new Promise( (resolve, reject) => {\n      this.collection\n        .find(criteria, options)\n        .toArray( (err, items) => {\n          if(err) {\n            return reject( new Error('Storage error in get()'));\n          }\n          resolve(items);\n        });\n    });\n  }\n\n  /**\n   * Get a paginated list of data Object\n   *\n   * @param {Object} criteria - mongodb criteria style\n   * @param {integer} page - the page to retrieve\n   * @param {integer} limit - number of item per page\n   * @param {string} orderby - a mongodb collection property to order the list result\n   * @param {string} order - 'asc' or 'desc'\n   * @return {Promise<Object[], Error>}\n   * @access public\n   */\n  getByPage(criteria, page=1, limit=15, orderby='id', order='asc') {\n    page = page > 0  || 1;\n    let options = {};\n    options.limit = limit;\n    options.skip = (page-1) * limit;\n    options.sort = [[ orderby, order ? 'asc' : 'desc']];\n    return this.get(criteria, options);\n  }\n\n  /**\n   * Insert many data Object in database\n   *\n   * @param {Object[]} dataArray - a list of data Object\n   * @return {Promise<Object[], Error>} - inserted data Object list\n   * @access public\n   * @override\n   */\n  insert(dataArray) {\n    if(dataArray.constructor !== Array ) {\n      throw new Error('DB insert: Expected array');\n    }\n\n    return new Promise( (resolve, reject) => {\n      this.collection.insert(dataArray, (err, insertResult) => {\n        if(err) {\n          return reject( new Error ('Storage error: insert() ' + err.message) );\n        }\n        let insertedDatas = insertResult.ops;\n        resolve(insertedDatas);\n      });\n    });\n  }\n\n  /**\n   * Update collection from criteria\n   *\n   * @param {Object} criteria - MongoDb criteria Object\n   * @param {Object} newValues - key-value Object with new data\n   * @param {Object} options - MongoDb options\n   * @param {boolean} options.upsert - insert if not exists\n   * @param {boolean} options.multi - update multi Object enabled\n   * @return {Promise<integer, Error>} - number of updated items\n   * @access public\n   * @override\n   */\n  update(criteria, newValues, options={upsert: false, multi: true}) {\n    criteria = this._prepareCriteria(criteria);\n    newValues = this._stripIdCriteria(newValues);\n    return new Promise( (resolve, reject) => {\n      this.collection.update(criteria, { $set: newValues}, options, (err, updateResult) => {\n        if(err) {\n          return reject(new Error('Storage error: update() ' + err.message));\n        }\n        resolve(updateResult.result.n);\n      });\n    });\n  }\n\n  /**\n   * Delete collection Object from criteria\n   *\n   * @param {Object} criteria - MongoDb criteria Object\n   * @return {Promise<integer, Error>} - number of deleted items\n   * @access public\n   * @override\n   */\n  delete(criteria) {\n    criteria = this._prepareCriteria(criteria);\n    return new Promise( (resolve, reject) => {\n      this.collection.remove(criteria, (err, deleteResult) => {\n        if(err) {\n          return reject( new Error('Storage error: delete() ' + err.message) );\n        }\n        let affetctedRows = deleteResult.result.n;\n        resolve(affetctedRows);\n      });\n    });\n  }\n\n  /**\n   * Prepare criteria Object\n   *\n   * @param {Object} criteria - MongoDb criteria Object\n   * @return {Object} criteria - MongoDb criteria Object with first level id string replaced by ObjectId\n   * @access private\n   *\n   * @todo: manage multi level, array, recursive replacement\n   */\n  _prepareCriteria(criteria) {\n    if(criteria._id && criteria._id.constructor === String) {\n      criteria._id = ObjectId(criteria._id);\n    }\n    return criteria;\n  }\n\n  /**\n   * Remove id criteria if any\n   *\n   * @param {Object} criteria - MongoDb criteria Object\n   * @return {Object} criteria - MongoDb criteria Object without first level id criteria\n   * @access private\n   */\n  _stripIdCriteria(criteria) {\n    if(criteria._id) {\n      delete criteria._id;\n    }\n    return criteria;\n  }\n}\n"],"sourceRoot":"/source/"}