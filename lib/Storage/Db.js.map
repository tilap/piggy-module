{"version":3,"sources":["Storage/Db.js"],"names":[],"mappings":"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","file":"Storage/Db.js","sourcesContent":["import AbstractStorage from './Abstract';\nimport { ObjectId } from 'mongodb';\n\nexport default class Storage extends AbstractStorage{\n\n  constructor(collection) {\n    super(collection);\n  }\n\n  get(criteria = {}, options= {}) {\n    criteria = this._prepareCriteria(criteria);\n    return new Promise( (resolve, reject) => {\n      this.collection\n        .find(criteria, options)\n        .toArray( (err, items) => {\n          if(err) {\n            return reject( new Error('Storage error in get()'));\n          }\n          resolve(items);\n        });\n    });\n  }\n\n  getByPage(criteria, page=1, limit=15, orderby='id', order=1) {\n    page = page > 0  || 1;\n    let options = {};\n    options.limit = limit;\n    options.skip = (page-1) * limit;\n    options.sort = [[ orderby, order ? 'asc' : 'desc']];\n    return this.get(criteria, options);\n  }\n\n  insert(dataArray) {\n    if(dataArray.constructor !== Array ) {\n      throw new Error('DB insert: Expected array');\n    }\n\n    return new Promise( (resolve, reject) => {\n      this.collection.insert(dataArray, (err, insertResult) => {\n        if(err) {\n          return reject( new Error ('Storage error: insert() ' + err.message) );\n        }\n        let insertedDatas = insertResult.ops;\n        resolve(insertedDatas);\n      });\n    });\n  }\n\n  update(criteria, newValues, options={upsert: false, multi: true}) {\n    criteria = this._prepareCriteria(criteria);\n    newValues = this._stripIdCriteria(newValues);\n    return new Promise( (resolve, reject) => {\n      this.collection.update(criteria, { $set: newValues}, options, (err, updateResult) => {\n        if(err) {\n          throw new Error('Storage error: update() ' + err.message);\n        }\n        resolve(updateResult.result.n);\n      });\n    });\n  }\n\n  delete(criteria) {\n    criteria = this._prepareCriteria(criteria);\n    return new Promise( (resolve, reject) => {\n      this.collection.remove(criteria, (err, deleteResult) => {\n        if(err) {\n          return reject( new Error('Storage error: delete() ' + err.message) );\n        }\n        let affetctedRows = deleteResult.result.n;\n        resolve(affetctedRows);\n      });\n    });\n  }\n\n  _prepareCriteria(criteria) {\n    if(criteria._id && criteria._id.constructor === String) {\n      criteria._id = ObjectId(criteria._id);\n    }\n    return criteria;\n  }\n\n  _stripIdCriteria(criteria) {\n    if(criteria._id) {\n      delete criteria._id;\n    }\n    return criteria;\n  }\n}\n"],"sourceRoot":"/source/"}