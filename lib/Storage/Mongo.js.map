{"version":3,"sources":["Storage/Mongo.js"],"names":[],"mappings":"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","file":"Storage/Mongo.js","sourcesContent":["import AbstractStorage from './Abstract';\nimport { ObjectId } from 'mongodb';\n\n/**\n * Manage data from a mongodb collection.\n */\nexport default class MongoStorage extends AbstractStorage{\n\n  /**\n   * @param {Object} collection - A mongodb collection\n   */\n  constructor(collection) {\n    super(collection);\n  }\n\n  /**\n   * Get a list of data Object from criteria and options\n   *\n   * @param {Object} criteria - mongodb criteria style\n   * @param {Object} options - mongodb options style\n   * @return {Promise<Object[], Error>}\n   * @access public\n   * @override\n   */\n  get(criteria = {}, options= {}) {\n    criteria = this._prepareCriteria(criteria);\n    return new Promise( (resolve, reject) => {\n      this._collection\n        .find(criteria, options)\n        .toArray( (err, items) => {\n          if(err) {\n            return reject( new Error('Storage error in get()'));\n          }\n          resolve(items);\n        });\n    });\n  }\n\n  /**\n   * Insert one Object in database\n   *\n   * @param {Object[]} dataArray - a list of data Object\n   * @return {Promise<Object[], Error>} - inserted data Object list\n   * @access public\n   * @override\n   */\n  insertOne(data={}) {\n    return new Promise( (resolve, reject) => {\n      this._collection.insert(data, (err, insertResult) => {\n        if(err) {\n          return reject( new Error ('Storage error: insert() ' + err.message) );\n        }\n        if(!insertResult.ops || insertResult.ops.length!==1) {\n          return reject( new Error ('Storage error: non unique result') );\n        }\n        let insertedDatas = insertResult.ops[0];\n        resolve(insertedDatas);\n      });\n    });\n  }\n\n  /**\n   * Update collection from criteria\n   *\n   * @param {Object} criteria - MongoDb criteria Object\n   * @param {Object} newValues - key-value Object with new data\n   * @param {Object} options - MongoDb options\n   * @param {boolean} options.upsert - insert if not exists\n   * @param {boolean} options.multi - update multi Object enabled\n   * @return {Promise<Boolean, Error>} - true if updated, else false\n   * @access public\n   * @override\n   */\n  updateOne(criteria, newData) {\n    let options= { upsert: false, multi: false };\n    criteria = this._prepareCriteria(criteria);\n    newData = this._stripIdCriteria(newData);\n    return new Promise( (resolve, reject) => {\n      this._collection.update(criteria, { $set: newData}, options, (err, updateResult) => {\n        if (err) {\n          return reject(new Error('Storage error: update() ' + err.message));\n        }\n        this.get(criteria).then( vos => {\n          if(!vos[0]) {\n            return reject('Error post update #1');\n          }\n          let res = vos[0];\n          return resolve(res);\n        })\n        .catch(err => reject('Error post update #2'));\n      });\n    });\n  }\n\n  /**\n   * Delete collection Object from criteria\n   *\n   * @param {Object} criteria - MongoDb criteria Object\n   * @return {Promise<integer, Error>} - number of deleted items\n   * @access public\n   * @override\n   */\n  delete(criteria) {\n    criteria = this._prepareCriteria(criteria);\n    return new Promise( (resolve, reject) => {\n      this._collection.deleteMany(criteria, (err, deleteResult) => {\n        if(err) {\n          return reject( new Error('Storage error: delete() ' + err.message) );\n        }\n        let deletedDocumentsCount = deleteResult.result.n;\n        resolve({ 'deletedCount' : deletedDocumentsCount});\n      });\n    });\n  }\n\n  /**\n   * Prepare criteria Object\n   *\n   * @param {Object} criteria - MongoDb criteria Object\n   * @return {Object} criteria - MongoDb criteria Object with first level id string replaced by ObjectId\n   * @access private\n   *\n   * @todo: manage multi level, array, recursive replacement\n   */\n  _prepareCriteria(criteria) {\n    if (criteria._id) {\n      if (criteria._id.constructor === String) {\n        criteria._id = new ObjectId(criteria._id);\n      }\n      if (criteria._id.$in) {\n        criteria._id.$in = criteria._id.$in.map( idStr => {\n          return new ObjectId(idStr);\n        });\n      }\n    }\n    return criteria;\n  }\n\n  /**\n   * Remove id criteria if any\n   *\n   * @param {Object} criteria - MongoDb criteria Object\n   * @return {Object} criteria - MongoDb criteria Object without first level id criteria\n   * @access private\n   */\n  _stripIdCriteria(criteria) {\n    if(criteria._id) {\n      delete criteria._id;\n    }\n    return criteria;\n  }\n}\n"],"sourceRoot":"/source/"}