{"version":3,"sources":["Storage/Abstract.js"],"names":[],"mappings":"qOAIqB,eAAe,aAKvB,SALQ,eAAe,CAKtB,SAAS,CAAE,UAAU,CAAE,sBALhB,eAAe,EAUhC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,AAK5B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,CAC/B,aAhBkB,eAAe,mBA2B/B,cAA6B,KAA5B,QAAQ,qDAAG,EAAE,kBAAE,OAAO,qDAAE,EAAE,cAC5B,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC,CACvD,yBAUQ,oBAAU,KAAT,IAAI,qDAAC,EAAE,cACf,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC,CACvD,yBAcQ,mBAAC,QAAQ,CAAE,OAAO,CAAE,CAC3B,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC,CACvD,sBAUK,iBAAC,QAAQ,CAAE,CACf,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC,CACvD,WArEkB,eAAe,2BAAf,eAAe","file":"Storage/Abstract.js","sourcesContent":["/**\n * Abstract storage for Vo.\n * Any method here must be implemented. If not, will throw an Error\n */\nexport default class AbstractStorage {\n  /**\n   * @param {any} connector - storage connector\n   * @param {String} collection - the collection to query on\n   */\n  constructor(connector, collection) {\n    /**\n     * @type {any}\n     * @private\n     */\n    this._connector = connector;\n    /**\n     * @type {String}\n     * @private\n     */\n    this._collection = collection;\n  }\n\n  /**\n   * Get a list of data Object from criteria and options\n   *\n   * @param {Object} criteria - mongodb criteria style\n   * @param {Object} options - mongodb options style\n   * @return {Promise<Object[], Error>}\n   * @access public\n   * @override\n   */\n  get(criteria = {}, options= {}) {\n    throw new Error('AbstractStorage: Method not set up');\n  }\n\n  /**\n   * Insert one Object in database\n   *\n   * @param {Object[]} dataArray - a list of data Object\n   * @return {Promise<Object, Error>} - inserted data Object\n   * @access public\n   * @override\n   */\n  insertOne(data={}) {\n    throw new Error('AbstractStorage: Method not set up');\n  }\n\n  /**\n   * Update collection from criteria\n   *\n   * @param {Object} criteria - MongoDb criteria Object\n   * @param {Object} newValues - key-value Object with new data\n   * @param {Object} options - MongoDb options\n   * @param {boolean} options.upsert - insert if not exists\n   * @param {boolean} options.multi - update multi Object enabled\n   * @return {Promise<Boolean, Error>} - true if updated, else false\n   * @access public\n   * @override\n   */\n  updateOne(criteria, newData) {\n    throw new Error('AbstractStorage: Method not set up');\n  }\n\n  /**\n   * Delete collection Object from criteria\n   *\n   * @param {Object} criteria - MongoDb criteria Object\n   * @return {Promise<integer, Error>} - number of deleted items\n   * @access public\n   * @override\n   */\n  delete(criteria) {\n    throw new Error('AbstractStorage: Method not set up');\n  }\n}\n"],"sourceRoot":"/source/"}