{"version":3,"sources":["Storage/Api.js"],"names":[],"mappings":"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","file":"Storage/Api.js","sourcesContent":["/* global fetch */\nimport AbstractStorage from 'piggy-module/lib/Storage/Abstract';\n\nexport default class ApiStorage extends AbstractStorage {\n\n  /**\n   * Get a list of data Object from criteria and options\n   *\n   * @param {Object} criteria - mongodb criteria style\n   * @param {Object} options - mongodb options style\n   * @return {Promise<Object[], Error>}\n   * @access public\n   * @override\n   */\n  get(criteria = {}, options= {}) {\n    let params = { criteria: criteria, options: options};\n    return this._runRequest('get', '', params, null, [])\n      .then( result => {\n        return result;\n      })\n      .catch( err => {\n        throw new Error(err.message);\n      });\n  }\n\n  /**\n   * Insert many data Object in database\n   *\n   * @param {Object[]} dataArray - a list of data Object\n   * @return {Promise<Object[], Error>} - inserted data Object list\n   * @access public\n   * @override\n   */\n  insert(voData) {\n    return new Promise( (resolve, reject) => {\n      if( voData.constructor !== Array ) {\n        voData = [voData];\n      }\n\n      let promises = [];\n      voData.forEach( dataset => {\n        let p = this._runRequest('post', '', null, dataset)\n          .then( result => {\n            return result;\n          })\n          .catch( err => {\n            throw new Error(err.message);\n          });\n        promises.push(p);\n      });\n\n      Promise.all(promises).then( results => {\n        resolve(results);\n      });\n    });\n\n  }\n\n  // update(criteria={}, newValues={}, options={}) {\n  //   let method = 'patch';\n  //   alert('not implemented yet');\n  // }\n\n  // delete(criteria) {\n  //   let method = 'delete';\n  //   alert('not implemented yet');\n  // }\n\n  getFetcherUrl(path='', params=null) {\n    let url = this._collection + path;\n\n    if(params) {\n      let args = [];\n      Object.keys(params).forEach( key => {\n        let value = encodeURIComponent(JSON.stringify(params[key]));\n        args.push( key + '=' + value);\n      });\n      if (args.length > 0) {\n        url += '?' + args.join('&');\n      }\n    }\n\n    return url;\n  }\n\n  getFetcherOptions(method, postData=null) {\n    if (['get', 'post', 'put', 'delete'].indexOf(method) < 0) {\n      throw new Error('Unknwon fetch method');\n    }\n    let options = {\n      method: method,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    };\n    if (method === 'post' && postData) {\n      options.body = JSON.stringify(postData);\n    }\n    return options;\n  }\n\n  _runRequest(method, path='', params=null, postData=null, defaultValue=null) {\n    let url = this.getFetcherUrl(path, params);\n    let options = this.getFetcherOptions(method, postData);\n\n// console.log('RUN REQUEST url', url);\n// console.log('RUN REQUEST options', options)\n\n    return new Promise( (resolve, reject) => {\n      fetch(url, options)\n        .then(function(response) {\n          if (response.status > 200 || response.status < 300) {\n            return response;\n          }\n          var error = new Error(response.statusText);\n          error.response = response;\n          return reject(error);\n        }).then( response => {\n          return response.json();\n        }).then( json => {\n          let data = null;\n          if(!json.data) {\n            return resolve(defaultValue);\n          }\n          if(json.data.constructor === Array) {\n            data = json.data.map( item => item.attributes );\n          }\n          else {\n            data = json.data.attributes;\n          }\n          return resolve(data);\n        }).catch( err => {\n          return reject(err);\n        });\n    });\n\n  }\n}\n"],"sourceRoot":"/source/"}