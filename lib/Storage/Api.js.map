{"version":3,"sources":["Storage/Api.js"],"names":[],"mappings":"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","file":"Storage/Api.js","sourcesContent":["import AbstractStorage from 'piggy-module/lib/Storage/Abstract';\nimport {UnreachableStorage} from 'piggy-module/lib/Storage/Errors';\n\nexport default class ApiStorage extends AbstractStorage {\n\n  constructor(collection = '') {\n    super(collection);\n  }\n\n  /**\n   * Get a list of data Object from criteria and options\n   *\n   * @param {Object} criteria - mongodb criteria style\n   * @param {Object} options - mongodb options style\n   * @return {Promise<Object[], Error>}\n   * @access public\n   * @override\n   */\n  get(criteria = {}, options = {}) {\n    let params = { 'criteria': criteria, 'options': options};\n    return this._runRequest('get', '', params, {}, []);\n  }\n\n  /**\n   * Insert many data Object in database\n   *\n   * @param {Object[]} data - an object dataset\n   * @return {Promise<Object[], Error>} - inserted data Object list\n   * @access public\n   * @override\n   */\n  insertOne(data = {}) {\n    return this._runRequest('post', '', {}, data);\n  }\n\n\n  /**\n   * Delete collection Object from criteria\n   *\n   * @param {Object} criteria - MongoDb criteria Object\n   * @return {Promise<integer, Error>} - number of deleted items\n   * @access public\n   * @override\n   */\n  delete(criteria = {}) {\n    return this._runRequest('delete', '', { 'criteria': criteria});\n  }\n\n\n  /**\n   * Build url to fetch\n   *\n   * @param {String} path - the relative path\n   * @params {Object} params - get params\n   * @return {String}\n   * @access private\n   */\n  _getFetcherUrl(path = '', params = {}) {\n    let url = this._collection + path;\n    if (params && Object.keys(params).length > 0) {\n      let args = [];\n      Object.keys(params).forEach( key => {\n        let value = encodeURIComponent(JSON.stringify(params[key]));\n        args.push( key + '=' + value);\n      });\n      if (args.length > 0) {\n        url += '?' + args.join('&');\n      }\n    }\n    return url;\n  }\n\n  /**\n   * Build fetch options depending on query type and extra params\n   * @param {String} method - fetch method: 'get', 'post', 'put' or 'delete'\n   * @param {Object} postData - extra data to send\n   * @return {Object}\n   * @access private\n   */\n  _getFetcherOptions(method, postData = {}) {\n    method = method.toLowerCase();\n    if (['get', 'post', 'put', 'delete'].indexOf(method) < 0) {\n      throw new Error('Unknwon fetch method ' + method);\n    }\n    let options = {\n      'method': method,\n      'headers': {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    };\n    let hasData = postData && Object.keys(postData).length > 0;\n    if (['post', 'put'].indexOf(method) > -1 && hasData) {\n      options.body = JSON.stringify(postData);\n    }\n    return options;\n  }\n\n  /**\n   * Run a request\n   * @todo only an options object as params\n   */\n  _runRequest(method, path = '', params = {}, postData = {}, defaultValue = {}) {\n    let url = this._getFetcherUrl(path, params);\n    let options = this._getFetcherOptions(method, postData);\n\n    return new Promise( (resolve, reject) => {\n      fetch(url, options)\n        .catch(error => {\n          if(error.constructor.name==='TypeError') {\n            reject( new UnreachableStorage());\n          }\n          reject(error);\n        })\n        .then(function(response) {\n          if (response.ok) {\n            return response;\n          }\n          let error = new Error(response.statusText);\n          error.response = response;\n          return reject(error);\n        }).then( response => {\n          return response.json();\n        }).then( json => {\n          resolve( this._isJsonPiggyResult(json) ? this._extractPiggyData(json, defaultValue) : json);\n        }).catch( err => {\n          reject(err);\n        });\n    });\n  }\n\n\n  // @todo: do a real api response parser as of ApiBag, ApiBagRessource and a ApiPiggyModuleBag\n  _isJsonPiggyResult(json) {\n    let isPiggyModuleResult = true;\n    if (!json.data) {\n      isPiggyModuleResult = false;\n    } else {\n      if (json.data.constructor === Array) {\n        json.data.forEach( item => {\n          if (!item.attributes) {\n            isPiggyModuleResult = false;\n          }\n        });\n      } else if (!json.data.attributes) {\n        isPiggyModuleResult = false;\n      }\n    }\n    return isPiggyModuleResult;\n  }\n\n  _extractPiggyData(json, defaultValue) {\n    let data;\n    if (!json.data) { // No data\n      data = defaultValue;\n    } else if (json.data.constructor === Array) { // Array of piggy-module dataset\n      data = json.data.map( item => item.attributes );\n    } else { // Single piggy-module dataset\n      data = json.data.attributes;\n    }\n    return data;\n  }\n}\n"],"sourceRoot":"/source/"}