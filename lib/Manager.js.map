{"version":3,"sources":["Manager.js"],"names":[],"mappings":"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","file":"Manager.js","sourcesContent":["import ValidationPropertyError from './ValidationPropertyError';\nimport ValidationError from './ValidationError';\n\n/**\n * Manage Vo items, sending and getting them to the Storage\n */\nexport default class Manager {\n\n  constructor(storage) {\n    /** @type {Storage} - an instance storage*/\n    this.storage = storage;\n  }\n\n  /**\n   * Make sure an object has the current Manager Vo class\n   *\n   * @param {Vo} vo\n   * @throw {Error}\n   */\n  assumeIsOwnVoClass(vo) {\n    if (vo.constructor.name !== this.constructor.voClass.name) {\n      throw new Error('Manager.assumeIsOwnVoClass() error: ' + this.constructor.voClass.name + ' expected class instace');\n    }\n  }\n\n  /**\n   * Get a new Vo, and fill it with data if any\n   *\n   * @param {?object} data\n   * @return {Vo}\n   */\n  getNewVo(data={}) {\n    return new this.constructor.voClass(data);\n  }\n\n  /**\n   * Get a list of Vo\n   *\n   * @param {Object} criteria - mongodb-like criteria style\n   * @param {Object} options - mongodb-like options style\n   * @return {Promise<Vo[], Error>}\n   * @access public\n   */\n  get(criteria={}, options={}) {\n    return this.storage.get(criteria, options)\n      .catch( err => {\n        throw new Error('Manager.get() error: ' + err.message);\n      })\n      .then( items => {\n        let res = [];\n        if (items.constructor===Array) {\n          items.map( item => {\n            res.push(this.getNewVo(item));\n          });\n        }\n        return res;\n      })\n      .catch( err => {\n        throw new Error('Manager.get() error#2: ' + err.message);\n      });\n  }\n\n\n  /**\n   * Save a vo in storage, update if exists, or insert\n   * @param {Vo} vo\n   * @return {Promise<Vo[], Error>}\n   * @access public\n   */\n  saveOne(vo) {\n    return vo.id ? this.updateOne(vo) : this.insertOne(vo);\n  }\n\n  /**\n   * Insert a vo in storage\n   * @param {Vo} vo\n   * @return {Promise<Vo[], Error>}\n   * @access public\n   */\n  insertOne(vo) {\n    this.assumeIsOwnVoClass(vo);\n    return new Promise( (resolve, reject) => {\n      this.getAllVoErrors(vo)\n        .then( validation => {\n          if (validation.hasError()) {\n            return reject(validation);\n          }\n\n          const data = vo.data;\n          this.storage.insertOne(data)\n            .catch(err => {\n              throw new Error('Manager.insertOne() error: ' + err.message);\n            })\n            .then(newItemsData => resolve(this.getNewVo(newItemsData)) );\n        })\n        .catch(err => reject( err ));\n    });\n  }\n\n  /**\n   * Update a vo in storage\n   * @param {Vo} vo\n   * @return {Promise<Vo[], Error>}\n   * @access public\n   */\n  updateOne(vo) {\n    this.assumeIsOwnVoClass(vo);\n\n    return new Promise( (resolve, reject) => {\n      this.getAllVoErrors(vo)\n        .then( validation => {\n          if (validation.hasError()) {\n            return reject(validation);\n          }\n          let criteria = { _id: vo.id };\n          this.storage.updateOne(criteria, vo.data)\n            .catch( err => reject(new Error('Manager.updateOne() error: ' + err.message)) )\n            .then( updatedVoData => resolve(this.getNewVo(updatedVoData)) );\n        })\n        .catch(err => reject( err ));\n    });\n  }\n\n  /**\n   * Delete a list of Vo in storage\n   * @param {Vo[]} Vo to delete\n   * @return {Promise<boolean, Error>} number of deleted item\n   * @access public\n   */\n  delete(vosArr) {\n    let idsToDelete=[];\n    vosArr.forEach( vo => {\n      try {\n        this.assumeIsOwnVoClass(vo);\n        if(vo.id) {\n          idsToDelete.push(vo.id);\n        }\n      }\n      catch(err) {\n        return null;\n      }\n    });\n    let criteria = { _id: { $in: idsToDelete}};\n    return new Promise( (resolve, reject) => {\n      this.storage.delete(criteria)\n        .then(deletedItemCount => {\n          resolve(deletedItemCount);\n        })\n        .catch(err => reject(err));\n    });\n  }\n\n  /**\n   * Get a Vo from a unique property value\n   * @param {string} property\n   * @param {any} value - the unique property value to look for\n   * @return {Promise<Vo, Error>}\n   * @access public\n   */\n  getByUniqueProperty(property, value) {\n    return new Promise( (resolve, reject) => {\n      // Check property is a unique one\n      if (!this.constructor.validatorClass.isPropertyUnique(property)) {\n        return reject(new Error('The property \"' + property + '\" is not unique'));\n      }\n\n      // @todo add cast to value\n      // value = this.constructor.voClass.castVoPropertyValue(property, value);\n\n      let criteria = {};\n      criteria[property] = value;\n\n      this.get(criteria)\n        .then( result => {\n          switch(result.length) {\n            case 0:\n              resolve(null);\n              break;\n            case 1:\n              resolve(result[0]);\n              break;\n            default:\n              reject(new Error('Got multiple object and must only get one'));\n          }\n        }, err => {\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Get a list of Vo from a unique property and many values\n   * @param {string} property\n   * @param {any[]} values - the unique property value to look for\n   * @return {Promise<Vo[], Error>}\n   * @access public\n   */\n  getByUniquePropertyM(property, values) {\n    return new Promise( (resolve, reject) => {\n      if (!this.constructor.validatorClass.isPropertyUnique(property)) {\n        return reject(new Error('The property \"' + property + '\" is not unique'));\n      }\n\n      if (values.constructor!==Array) {\n        return reject(new Error('Values must be an array'));\n      }\n\n      let criteria = {};\n      criteria[property] = { $in: values};\n      this.get(criteria)\n        .then( results => {\n          resolve(results);\n        }, err => {\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Get a list of all error of a Vo\n   * @param {Vo} vo - the Vo to check\n   * @param {string[]} skipProperties - a list of properties not to check\n   * @return {Promise<object, Error>} - {validationError}\n   * @access public\n   */\n  getAllVoErrors(vo, skipProperties= []) {\n    this.assumeIsOwnVoClass(vo);\n    let validationError = new ValidationError();\n    return new Promise( (resolve, reject) => {\n      Promise.all( [this.getVoFormatErrors(vo), this.getVoUniqueErrors(vo), this.getVoBusinessErrors(vo)] )\n        .then( errorsArrays => {\n          errorsArrays.map( errorsByType => {\n            Object.keys(errorsByType).map( field => {\n              if (!validationError.hasPropertyError(field) && skipProperties.indexOf(field) < 0) {\n                validationError.setPropertyError(field, errorsByType[field]);\n              }\n            });\n          });\n          return resolve(validationError);\n        },\n        err => {\n          reject(err);\n        }\n      );\n    });\n\n  }\n\n  /**\n   * Get a list of the properties format error of a Vo\n   * @param {Vo} vo - the Vo to check\n   * @return {Promise<object, Error>} - list of message errors (key: property, value: message)\n   * @access public\n   */\n  getVoFormatErrors(vo) {\n    this.assumeIsOwnVoClass(vo);\n    return new Promise( (resolve) => {\n      let validator = new this.constructor.validatorClass(vo);\n      validator.validateVo();\n      resolve(validator.hasError() ? validator.errors : {});\n    });\n  }\n\n  /**\n   * Get a list of the unique properties error of a Vo\n   * @param {Vo} vo - the Vo to check\n   * @return {Promise<object, Error>} - list of message errors (key: property, value: message)\n   * @access public\n   */\n  getVoUniqueErrors(vo) {\n    this.assumeIsOwnVoClass(vo);\n    let result = {};\n    let promises = [];\n\n    this.constructor.validatorClass.uniques.forEach( property => {\n      let value = vo[property];\n\n      // Skip if empty and not required\n      if (this.constructor.validatorClass.needToCheckProperty(property, value)) {\n        let p = this.getByUniqueProperty(property, value)\n          .then ( foundVo => {\n            if (foundVo == null) {\n              return null;\n            }\n            if (!vo.id) {\n              return property;\n            }\n            if (String(vo.id)===String(foundVo.id)) {\n              return null;\n            }\n            return property;\n          });\n        promises.push(p);\n      }\n    });\n\n    if (promises.length === 0) {\n      return Promise.resolve({});\n    }\n\n    return Promise.all(promises)\n      .then( uniquePromiseResults => {\n        uniquePromiseResults.forEach( property => {\n          if(property) {\n            result[property] = new ValidationPropertyError(property, 'unique');\n          }\n        });\n        return result;\n      });\n  }\n\n  /**\n   * Get a list of the  properties business errors of a Vo. To be override by business specific needs\n   * @param {Vo} vo - the Vo to check\n   * @return {Promise<object, Error>} - list of message errors (key: property, value: message)\n   * @access public\n   */\n  getVoBusinessErrors(vo) {\n    this.assumeIsOwnVoClass(vo);\n    return new Promise( (resolve) => {\n      return resolve({});\n    });\n  }\n\n  /**\n   * Get the list of Class available methods\n   *\n   * @return {String[]} - the list of the callable methods\n   * @access public\n   */\n  get availableMethods() {\n    let OwnMethods = Object.getOwnPropertyNames(Manager.prototype);\n    let childMethods = Object.getOwnPropertyNames(this.__proto__);\n\n    let methods = childMethods;\n    OwnMethods.forEach( method => {\n      if (methods.indexOf(method) < 0) {\n        methods.push(method);\n      }\n    });\n    return methods;\n  }\n}\n\n\nManager.init = function(ManagerChild, VoClass, ValidatorClass) {\n\n  Object.defineProperty(ManagerChild, 'voClass', {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: VoClass\n  });\n\n  Object.defineProperty(ManagerChild, 'validatorClass', {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: ValidatorClass\n  });\n\n  VoClass.getPropertiesNames().forEach( property => {\n    if (ValidatorClass.isPropertyUnique(property)) {\n      let cleanProperty = property.replace(/([^a-z0-9])/ig, '');\n      let methodName = 'getOneBy' + cleanProperty.charAt(0).toUpperCase() + cleanProperty.substr(1).toLowerCase();\n      Object.defineProperty(ManagerChild.prototype, methodName, {\n        enumerable: false,\n        writable: false,\n        configurable: false,\n        value: function(value) {\n          return this.getByUniqueProperty(property, value);\n        }\n      });\n    }\n  });\n};\n"],"sourceRoot":"/source/"}