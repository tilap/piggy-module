{"version":3,"sources":["Validator.js"],"names":[],"mappings":"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","file":"Validator.js","sourcesContent":["import { ValidatorError } from './Errors';\nimport validatorLib from './utils/validatorLib';\n\nexport default class Validator {\n\n  constructor(vo=null) {\n    this._vo = vo;\n    this.errors = {};\n  }\n\n  validateVo() {\n    let properties = this._vo.constructor.getPropertiesNames();\n    this.errors = {};\n    properties.forEach( property => {\n      try {\n        this.constructor.checkProperty(property, this._vo[property]);\n      }\n      catch(err) {\n        this.errors[property] = err.message;\n      }\n    });\n    return this;\n  }\n\n  hasError() {\n    return Object.keys(this.errors).length > 0;\n  }\n\n  static isPropertyUnique(property) {\n    return this.uniques.indexOf(property) > -1;\n  }\n\n  static isPropertyRequired(property) {\n    return this.required.indexOf(property) > -1;\n  }\n\n  static hasRulesFor(key) {\n    return this.rules[key] ? true : false;\n  }\n\n  // Get a property validation rules\n  static getRulesFor(key) {\n    return this.rules[key] ? this.rules[key] : [];\n  }\n\n  static needToCheckProperty(property, value) {\n    let skipIfEmpty = !this.isPropertyRequired(property);\n    let isEmpty = !Validator.validate('required', value);\n\n    return (isEmpty && skipIfEmpty) ? false : true;\n  }\n\n  static checkProperty(property, value) {\n    if(this.needToCheckProperty(property, value)) {\n      this.getRulesFor(property).forEach( validator => {\n        let args = validator.args || [];\n        let skipIfEmpty = !this.isPropertyRequired(property);\n\n        if(args.constructor!==Array) {\n          args = [args];\n        }\n        if(!this.validate(validator.fct, value, args, skipIfEmpty)) {\n          throw new ValidatorError(validator.msg);\n        }\n      });\n    }\n    return true;\n  }\n\n  // Run a validator rules and get the result\n  static validate(fct, value, args=[], skipIfEmpty=false) {\n    // @tocheck if really usefull...\n    if(skipIfEmpty && !value) {\n      return true;\n    }\n\n    let funcArgs = [value].concat(args);\n    if(fct.constructor === Function) {\n      return fct.apply(null, funcArgs);\n    }\n    if(fct.constructor === String) {\n      return validatorLib[fct].apply(null, funcArgs);\n    }\n    throw new ValidatorError('Wrong validator function');\n  }\n\n}\n\nValidator.initFromVoClass = function(ValidatorChild, properties) {\n  let ruleset = {};\n  let requiredProperties = [];\n  let uniqueProperties = [];\n\n  Object.keys(properties).forEach((name) => {\n    let isRequired = properties[name].required && true===properties[name].required;\n    let isUnique = properties[name].unique && true===properties[name].unique;\n    let validators = properties[name].validators || [];\n    ruleset[name] = [];\n\n    if(isUnique) {\n      uniqueProperties.push(name);\n    }\n    if(isRequired) {\n      requiredProperties.push(name);\n    }\n\n    validators.forEach( itemCfg => {\n      if(!itemCfg.fct) {\n        throw new Error('Configuration error: validator need a fct');\n      }\n      ruleset[name].push({\n        fct: itemCfg.fct,\n        msg: itemCfg.msg || '',\n        args: itemCfg.args || [],\n        skipIfEmpty: !isRequired\n      });\n    });\n  });\n\n  Object.defineProperty(ValidatorChild, 'rules', {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: ruleset\n  });\n\n  Object.defineProperty(ValidatorChild, 'required', {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: requiredProperties\n  });\n\n  Object.defineProperty(ValidatorChild, 'uniques', {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: uniqueProperties\n  });\n};\n"],"sourceRoot":"/source/"}