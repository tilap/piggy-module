{"version":3,"sources":["Validator.js"],"names":[],"mappings":"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","file":"Validator.js","sourcesContent":["import validatorLib from './utils/validatorLib';\nimport ValidationPropertyError from './ValidationPropertyError';\n\n/**\n * Class to validate properties of a Vo\n */\nexport default class Validator {\n\n  /**\n   * @param {?Vo} vo - a Vo to validate\n   */\n  constructor(vo = null) {\n    /** @type {Vo} */\n    this._vo = vo;\n    /** @type {Object} - associated key-val as property name / array of errors*/\n    this.errors = {};\n  }\n\n  /**\n   * Validate all the properties of the current Vo\n   * @return {Validator}\n   * @access public\n   */\n  validateVo() {\n    let properties = this._vo.constructor.getPropertiesNames();\n    this.errors = {};\n\n    properties.forEach( property => {\n      try {\n        this.constructor.checkProperty(property, this._vo[property]);\n      }\n      catch(err) {\n        this.errors[property] = err;\n      }\n    });\n    return this;\n  }\n\n  /**\n   * To know if the validation failed\n   * @return {Boolean}\n   * @access public\n   */\n  hasError() {\n    return Object.keys(this.errors).length > 0;\n  }\n\n  /**\n   * Is a property unique?\n   * @param {String} property - the property name\n   * @return {Boolean}\n   * @access public\n   */\n  static isPropertyUnique(property) {\n    return this.uniques.indexOf(property) > -1;\n  }\n\n  /**\n   * Is a property required?\n   * @param {String} property - the property name\n   * @return {Boolean}\n   * @access public\n   */\n  static isPropertyRequired(property) {\n    return this.required.indexOf(property) > -1;\n  }\n\n  /**\n   * Is there any validation rule for a given property\n   * @param {String} property - the property name\n   * @return {Boolean}\n   * @access public\n   */\n  static hasRulesFor(property) {\n    return this.rules[property] ? true : false;\n  }\n\n  /**\n   * Get the list of validation rules\n   * @param {String} property - the property name\n   * @return {Array}\n   * @access public\n   */\n  static getRulesFor(property) {\n    return this.rules[property] ? this.rules[property] : [];\n  }\n\n  /**\n   * Does a property need to be checked?\n   * @param {String} property - the property name\n   * @param {any} value - the property value\n   * @return {Array}\n   * @access public\n   */\n  static needToCheckProperty(property, value) {\n    let skipIfEmpty = !this.isPropertyRequired(property);\n    let isEmpty = !Validator.validate('required', value);\n\n    return (isEmpty && skipIfEmpty) ? false : true;\n  }\n\n  /**\n   * Check a property value\n   * @param {String} property - the property name\n   * @param {any} value - the property value\n   * @return {true}\n   * @throw {Error}\n   * @access public\n   */\n  static checkProperty(property, value) {\n    if (this.needToCheckProperty(property, value)) {\n      this.getRulesFor(property).forEach( validator => {\n        let args = validator.args || [];\n        let skipIfEmpty = !this.isPropertyRequired(property);\n\n        if (args.constructor!==Array) {\n          args = [args];\n        }\n        if (!this.validate(validator.fct, value, args, skipIfEmpty)) {\n          let error =  new ValidationPropertyError(property, 'format', validator.msg);\n          throw error;\n        }\n      });\n    }\n    return true;\n  }\n\n  /**\n   * Run a validator rules and get the result\n   * @param {any} fct - the validation function or validator string name\n   * @param {any} value - the property value\n   * @param {Array} args - the validation rule options\n   * @param {Boolean} skipIfEmpty - skip to check if the property is empty\n   * @return {Boolean}\n   * @throw {Error}\n   * @access public\n   */\n  static validate(fct, value, args=[], skipIfEmpty=false) {\n    // @tocheck if really usefull...\n    if (skipIfEmpty && !value) {\n      return true;\n    }\n\n    let funcArgs = [value].concat(args);\n    if (fct.constructor === Function) {\n      return fct.apply(null, funcArgs);\n    }\n    if (fct.constructor === String) {\n      return validatorLib[fct].apply(null, funcArgs);\n    }\n    throw new Error('Wrong validator function');\n  }\n}\n\nValidator.initFromVoClass = function(ValidatorChild, properties) {\n  let ruleset = {};\n  let requiredProperties = [];\n  let uniqueProperties = [];\n\n  Object.keys(properties).forEach((name) => {\n    let isRequired = properties[name].required && true===properties[name].required;\n    let isUnique = properties[name].unique && true===properties[name].unique;\n    let validators = properties[name].validators || [];\n    ruleset[name] = [];\n\n    if (isUnique) {\n      uniqueProperties.push(name);\n    }\n    if (isRequired) {\n      requiredProperties.push(name);\n    }\n\n    validators.forEach( itemCfg => {\n      if (!itemCfg.fct) {\n        throw new Error('Configuration error: validator need a fct');\n      }\n      ruleset[name].push({\n        fct: itemCfg.fct,\n        msg: itemCfg.msg || '',\n        args: itemCfg.args || [],\n        skipIfEmpty: !isRequired\n      });\n    });\n  });\n\n  Object.defineProperty(ValidatorChild, 'rules', {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: ruleset\n  });\n\n  Object.defineProperty(ValidatorChild, 'required', {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: requiredProperties\n  });\n\n  Object.defineProperty(ValidatorChild, 'uniques', {\n    enumerable: false,\n    writable: false,\n    configurable: false,\n    value: uniqueProperties\n  });\n};\n"],"sourceRoot":"/source/"}