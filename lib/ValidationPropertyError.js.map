{"version":3,"sources":["ValidationPropertyError.js"],"names":[],"mappings":"uuBAKqB,uBAAuB,aAO9B,SAPO,uBAAuB,CAO7B,QAAQ,CAAE,IAAI,CAAgB,KAAd,OAAO,qDAAG,EAAE,mCAPtB,uBAAuB,EAQxC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAE,SAAS,CAAE,CACrC,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,IAAI,CAChB,QAAQ,CAAE,KAAK,CACf,YAAY,CAAE,KAAK,CACpB,CAAC,CAAC,AAEH,MAAM,CAAC,cAAc,CAAC,IAAI,CAAE,UAAU,CAAE,CACtC,KAAK,CAAE,QAAQ,CACf,UAAU,CAAE,IAAI,CAChB,QAAQ,CAAE,KAAK,CACf,YAAY,CAAE,KAAK,CACpB,CAAC,CAAC,AAEH,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,AAC1B,GAAG,CAAC,uBAAuB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAE,CAC5C,MAAM,IAAI,KAAK,CAAC,gCAAgC,GAAG,IAAI,CAAC,CAAC,CAC1D,AACD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAE,MAAM,CAAE,CAClC,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,IAAI,CAChB,QAAQ,CAAE,KAAK,CACf,YAAY,CAAE,KAAK,CACpB,CAAC,CAAC,CACJ,aAhCkB,uBAAuB,+BAuCzB,oBAAC,IAAI,CAAE,CACtB,OAAO,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CACtE,WAzCkB,uBAAuB,2BAAvB,uBAAuB,CA6C5C,MAAM,CAAC,cAAc,CAAC,uBAAuB,CAAE,OAAO,CAAE,CACtD,UAAU,CAAE,KAAK,CACjB,QAAQ,CAAE,KAAK,CACf,YAAY,CAAE,KAAK,CACnB,KAAK,CAAE,CACL,UAAU,CAAE,UAAU,CACtB,QAAQ,CAAE,QAAQ,CAClB,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,UAAU,CACvB,CACF,CAAC,CAAC","file":"ValidationPropertyError.js","sourcesContent":["/**\n * A property error\n * Allow to attach it to a property, with message and simple error type:\n * 'REQUIRED', 'UNIQUE', 'FORMAT', 'BUSINESS',\n */\nexport default class ValidationPropertyError {\n\n  /**\n   * @param {String} property - the failed validation property name\n   * @param {String} type - One of the error type: REQUIRED, UNIQUE, FORMAT, BUSINESS\n   * @param {String} message - the error message for the user\n   */\n  constructor (property, type, message = '') {\n    Object.defineProperty(this, 'message', {\n      value: message,\n      enumerable: true,\n      writable: false,\n      configurable: false,\n    });\n\n    Object.defineProperty(this, 'property', {\n      value: property,\n      enumerable: true,\n      writable: false,\n      configurable: false,\n    });\n\n    type = type.toUpperCase();\n    if(!ValidationPropertyError.typeExists(type)) {\n      throw new Error('ValidationError: unknown type ' + type);\n    }\n    Object.defineProperty(this, 'type', {\n      value: type,\n      enumerable: true,\n      writable: false,\n      configurable: false,\n    });\n  }\n\n  /**\n   * Check if the error type exists\n   * @param {String} type - the type to check\n   * @return {Boolean}\n   */\n  static typeExists(type) {\n    return Object.keys(ValidationPropertyError.TYPES).indexOf(type) > -1;\n  }\n}\n\n\nObject.defineProperty(ValidationPropertyError, 'TYPES', {\n  enumerable: false,\n  writable: false,\n  configurable: false,\n  value: {\n    'REQUIRED': 'REQUIRED',\n    'UNIQUE': 'UNIQUE',\n    'FORMAT': 'FORMAT',\n    'BUSINESS': 'BUSINESS',\n  }\n});\n\n"],"sourceRoot":"/source/"}